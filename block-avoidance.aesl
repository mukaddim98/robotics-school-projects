<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="500" name="TARGET"/>
<constant value="900" name="G_THRESHOLD"/>
<constant value="0" name="STOPPED"/>
<constant value="1" name="LEFT"/>
<constant value="2" name="RIGHT"/>
<constant value="3" name="BLOCKED"/>
<constant value="1000" name="H_THRESHOLD"/>
<constant value="700" name="FAULT_PERIOD"/>
<constant value="4" name="LOST"/>
<constant value="12000" name="HALT_PERIOD"/>
<constant value="5" name="FORWARD"/>
<constant value="6" name="TURN"/>
<constant value="10" name="FIND_LINE"/>
<constant value="11" name="ALIGN"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var min 
var max 
var mean 
var state = STOPPED 
var cw
call leds.top(0,0,0) # turn off LEDs
timer.period[0] = 0
timer.period[1] = 0

	
motor.left.target = 0 # reset motors
motor.right.target = 0
	
onevent button.forward # on forward button press
	call leds.top(0,0,0) # turn off LEDs
		if (prox.ground.delta[1] - prox.ground.delta[0]) &lt; 500 and (prox.ground.delta[1] - prox.ground.delta[0]) > -500 then
			state = FORWARD # transition to RIGHT state
			motor.left.target = TARGET # move right
			motor.right.target = TARGET
			timer.period[0] = FAULT_PERIOD
		# sensing black line to the right
		elseif prox.ground.delta[1] &lt; prox.ground.delta[0] then
			state = RIGHT # transition to RIGHT state
			motor.left.target = TARGET # move right
			motor.right.target = 0
			timer.period[0] = FAULT_PERIOD
		# sensing black line to the left
		elseif prox.ground.delta[1] > prox.ground.delta[0] then
			state = LEFT # transition to LEFT state
			motor.left.target = 0 # move left
			motor.right.target = TARGET
			timer.period[0] = FAULT_PERIOD
		end


onevent button.backward # on backward button press
	call leds.top(0,0,0) # turns off LEDs
	state = STOPPED # transition to STOPPED state
	motor.left.target = 0 # stop motors
	motor.right.target = 0
	timer.period[0] = 0
	timer.period[1] = 0

	
onevent prox # on prox event
	if state != STOPPED then # if robot is moving
		# compute min, max, and mean over the current sensor readings
		call math.stat( prox.horizontal[0:4], min, max, mean )
		
		# if we are in state LEFT or RIGHT and sense a blockage
		if (state == LEFT or state == RIGHT or state == FORWARD) and max > 0 then	
			state = BLOCKED # transition to BLOCKED state
			call leds.top(255,0,0)
			if  prox.horizontal[0]+prox.horizontal[1] > prox.horizontal[3] + prox.horizontal[4] then
				motor.left.target = TARGET
				motor.right.target = 0
				cw = 0
			else #else, turn right
				motor.left.target = 0
				motor.right.target = TARGET
				cw =1
			end
			timer.period[0] = 0
		end
			
		# if we are in state BLOCKED and blockage is removed

		if state == BLOCKED and max &lt;= 0 then
			motor.left.target = TARGET
			motor.right.target = TARGET
			timer.period[1] = 430
			state = TURN
		end
		
		
		if (state == FORWARD) and (prox.ground.delta[0] &lt; 800 or prox.ground.delta[1] &lt; 800)then
			if prox.ground.delta[1] &lt; prox.ground.delta[0] then
				state = RIGHT # transition to RIGHT state
				call leds.top(0,0,0)
				motor.left.target = TARGET # move right
				motor.right.target = 0
				timer.period[0] = FAULT_PERIOD
			elseif prox.ground.delta[1] > prox.ground.delta[0] then
				state = LEFT # transition to LEFT state
				call leds.top(0,0,0)
				motor.left.target = 0 # move left
				motor.right.target = TARGET
				timer.period[0] = FAULT_PERIOD
			end
			
		end
		
		# if moving left and sensing black line
		if (state == LEFT) and (prox.ground.delta[0]+prox.ground.delta[1]) &lt;= 1860 then
			if prox.ground.delta[1] &lt; prox.ground.delta[0] then
				state = RIGHT # transition to RIGHT state
				call leds.top(0,0,0)
				motor.left.target = TARGET # move right
				motor.right.target = 0
				timer.period[0] = FAULT_PERIOD
			elseif (prox.ground.delta[1] - prox.ground.delta[0]) &lt; 100 and (prox.ground.delta[1] - prox.ground.delta[0]) > -100  then
				state = FORWARD # transition to RIGHT state
				call leds.top(0,0,0)
				motor.left.target = TARGET # move right
				motor.right.target = TARGET
				timer.period[0] = FAULT_PERIOD
			end
			
		end
	
		# if moving right and sensing black line
		if (state == RIGHT) and (prox.ground.delta[0]+prox.ground.delta[1]) &lt;= 1860 then
			if prox.ground.delta[1] > prox.ground.delta[0] then
				state = LEFT # transition to LEFT state
				call leds.top(0,0,0)
				motor.left.target = 0 # move left
				motor.right.target = TARGET
				timer.period[0] = FAULT_PERIOD
			elseif (prox.ground.delta[1] - prox.ground.delta[0]) &lt; 100 and (prox.ground.delta[1] - prox.ground.delta[0]) > -100 then
				state = FORWARD # transition to RIGHT state
				call leds.top(0,0,0)
				motor.left.target = TARGET # move right
				motor.right.target = TARGET
				timer.period[0] = FAULT_PERIOD
			end
		end
		
		if state == LOST then
			if prox.ground.delta[0] &lt; G_THRESHOLD then
				motor.left.target = 0
				motor.right.target = TARGET
				state = LEFT
			end
			if prox.ground.delta[1] &lt; G_THRESHOLD then
				motor.left.target = TARGET
				motor.right.target = 0
				state = RIGHT
			end
		end				
	end 
	
	if state == FIND_LINE then
		if cw == 0 then
			if prox.horizontal[0] > 0 then
				motor.left.target = TARGET
				motor.right.target = -TARGET
			end
			if prox.horizontal[0] &lt;= 0 then
				motor.left.target = (TARGET-300)
				motor.right.target = TARGET
			end
			if (prox.ground.delta[0] &lt; G_THRESHOLD or prox.ground.delta[1] &lt; G_THRESHOLD) then
				state = ALIGN
				timer.period[1] = 300
				motor.left.target = TARGET
				motor.right.target = 0
			end
		end
		if cw == 1 then
			if prox.horizontal[4] > 0 then
				motor.left.target = -TARGET
				motor.right.target = TARGET
			end
			if prox.horizontal[4] &lt;= 0 then
				motor.left.target = TARGET
				motor.right.target = (TARGET-300)
			end
			if (prox.ground.delta[0] &lt; G_THRESHOLD or prox.ground.delta[1] &lt; G_THRESHOLD) then
				state = ALIGN
				timer.period[1] = 300
				motor.left.target = 0
				motor.right.target = TARGET
			end
		end		
	end		
	
onevent timer0
	state = LOST
	call leds.top(0,0,255)
	motor.left.target = -TARGET
	motor.right.target = -TARGET
	timer.period[0] = 0


onevent timer1
	if  state == TURN then
			if cw == 0 then
				motor.left.target = (TARGET-300)
				motor.right.target = TARGET
				state = FIND_LINE
			end
			if cw ==1 then
				motor.left.target = TARGET
				motor.right.target = (TARGET-300)
				state = FIND_LINE
			end
			timer.period[1]=0
	end
	if state == ALIGN then
		if  cw == 0 then
			state = RIGHT
		end
		if  cw == 1 then
			state = LEFT
		end
	end 

	</node>


</network>
